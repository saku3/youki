runc run no capability
runc run with unknown capability
runc run with new privileges
runc run with some capabilities
runc exec --cap
runc exec --cap [ambient is set from spec]
runc run [ambient caps not set in inheritable result in a warning]
runc exec (cgroup v2, ro cgroupfs, new cgroupns) does not chown cgroup # skip test requires systemd
runc exec (cgroup v2, rw cgroupfs, inherit cgroupns) does not chown cgroup # skip test requires systemd
runc exec (cgroup v2, rw cgroupfs, new cgroupns) does chown cgroup # skip test requires systemd
runc create (no limits + no cgrouppath + no permission) succeeds
runc create (rootless + no limits + cgrouppath + no permission) fails with permission error # skip test requires rootless
runc create (rootless + limits + no cgrouppath + no permission) fails with informative error # skip test requires rootless
runc create (limits + cgrouppath + permission on the cgroup dir) succeeds
runc exec (limits + cgrouppath + permission on the cgroup dir) succeeds
runc exec (cgroup v2 + init process in non-root cgroup) succeeds
runc run (cgroup v1 + unified resources should fail) # skip test requires cgroups_v1
runc run (blkio weight)
runc run (per-device io weight for bfq) # skip BFQ scheduler not available
runc run (per-device multiple iops via unified)
runc run (cpu.idle)
runc run (hugetlb limits)
runc run (cgroup v2 resources.unified only)
runc run (cgroup v2 resources.unified swap)
runc run (cgroup v2 resources.unified override)
runc run (cgroupv2 mount inside container)
runc exec (cgroup v1+hybrid joins correct cgroup) # skip test requires cgroups_hybrid
runc exec should refuse a paused container
runc exec --ignore-paused
runc run/create should error for a non-empty cgroup
checkpoint and restore # skip test requires criu
checkpoint and restore (bind mount, destination is symlink) # skip test requires criu
checkpoint and restore (with --debug) # skip test requires criu
checkpoint and restore (cgroupns) # skip test requires criu
checkpoint --pre-dump (bad --parent-path) # skip test requires criu
checkpoint --pre-dump and restore # skip test requires criu
checkpoint --lazy-pages and restore # skip test requires criu
checkpoint and restore in external network namespace # skip test requires criu
checkpoint and restore with container specific CRIU config # skip test requires criu
checkpoint and restore with nested bind mounts # skip test requires criu
checkpoint then restore into a different cgroup (via --manage-cgroups-mode ignore) # skip test requires criu
checkpoint/restore and exec # skip test requires criu
runc exec [CPU affinity, only initial set from process.json]
runc exec [CPU affinity, initial and final set from process.json]
runc exec [CPU affinity, initial and final set from config.json]
runc create
runc create exec
runc create --pid-file
runc create --pid-file with new CWD
runc create [shared pidns + rootless]
runc exec --user with no access to cwd
runc create sets up user before chdir to cwd if needed # skip test requires rootless
runc create can chdir if runc has access
global --debug
global --debug to --log
global --debug to --log --log-format 'text'
global --debug to --log --log-format 'json'
runc delete
runc delete --force
runc delete --force ignore not exist
runc delete [host pidns + init gone]
runc delete --force [host pidns + init gone]
runc delete --force [paused container]
runc delete --force in cgroupv1 with subcgroups # skip test requires cgroups_v1
runc delete --force in cgroupv2 with subcgroups
runc delete removes failed systemd unit # skip requires systemd >= v244
runc run [redundant default /dev/tty]
runc run [redundant default /dev/ptmx]
runc run/update [device cgroup deny]
runc run [device cgroup allow rw char device]
runc run [device cgroup allow rm block device]
runc exec vs systemctl daemon-reload # skip test requires systemd
runc run [devices vs systemd NeedDaemonReload] # skip requires systemd >= v230
non-empty HOME env is used
empty HOME env var is overridden
empty HOME env var is overridden with multiple overrides
env var override is set only once
env var override
env var with new-line is honored
events --stats
events --interval 1s
events --interval 100ms
runc exec
runc exec --pid-file
runc exec --pid-file with new CWD
runc exec ls -la
runc exec ls -la with --cwd
runc exec --env
runc exec --user
runc exec --user vs /dev/null ownership
runc exec --additional-gids
runc exec --preserve-fds
runc --debug exec
runc --debug --log exec
runc exec --cgroup sub-cgroups [v1] # skip test requires cgroups_v1
runc exec --cgroup subcgroup [v2]
runc exec [execve error]
runc exec check default home
runc -h
runc command -h
runc foo -h
runc create [second createRuntime hook fails]
runc create [hook fails]
runc run [hook fails]
runc run [startContainer hook should inherit process environment]
runc run [hook's argv is preserved]
runc run (hooks library tests)
runc run [host mount ns + hooks]
simple idmap mount [userns]
simple idmap mount [no userns]
write to an idmap mount [no userns]
idmap mount with propagation flag [userns]
idmap mount with relative path [userns]
idmap mount with bind mount [userns]
idmap mount with bind mount [no userns]
two idmap mounts (same mapping) with two bind mounts [userns]
same idmap mount (different mappings) [userns]
same idmap mount (different mappings) [no userns]
multiple idmap mounts (different mappings) [userns]
multiple idmap mounts (different mappings) [no userns]
idmap mount (complicated mapping) [no userns]
idmap mount (non-recursive idmap) [userns]
idmap mount (non-recursive idmap) [no userns]
idmap mount (idmap flag) [userns]
idmap mount (idmap flag) [no userns]
idmap mount (ridmap flag) [userns]
idmap mount (ridmap flag) [no userns]
idmap mount (idmap flag, implied mapping) [userns]
idmap mount (ridmap flag, implied mapping) [userns]
idmap mount (idmap flag, implied mapping, userns join) [userns]
ioprio_set is applied to process group
kill detached busybox
kill KILL [host pidns]
kill KILL [host pidns + init gone]
kill KILL [shared pidns]
list
mask paths [file]
mask paths [directory]
mask paths [prohibit symlink /proc]
mask paths [prohibit symlink /sys]
runc run [tmpcopyup]
runc run [bind mount]
runc run [ro tmpfs mount]
runc run [ro /dev mount]
runc run [tmpfs mount with absolute symlink]
runc run [/proc is a symlink]
runc run [setgid / + mkdirall]
runc run [ro /sys/fs/cgroup mounts]
runc run [ro /sys/fs/cgroup mounts + cgroupns]
runc run [mount order, container bind-mount source]
runc run [mount order, container bind-mount source] (userns)
runc run [mount order, container idmap source]
runc run [mount order, container idmap source] (userns)
runc run [rootfsPropagation shared]
runc run [rbind,ro mount is read-only but not recursively]
runc run [rbind,rro mount is recursively read-only]
runc run [rbind,ro,rro mount is recursively read-only too]
runc run [mount(8)-like behaviour: --bind with no options]
runc run [mount(8)-unlike behaviour: --bind with clearing flag]
runc run [implied-rw bind mount of a ro fuse sshfs mount]
runc run [explicit-rw bind mount of a ro fuse sshfs mount]
runc run [dev,exec,suid,atime bind mount of a nodev,nosuid,noexec,noatime fuse sshfs mount]
runc run [ro bind mount of a nodev,nosuid,noexec fuse sshfs mount]
runc run [ro,symfollow bind mount of a rw,nodev,nosymfollow fuse sshfs mount]
runc run [ro,noexec bind mount of a nosuid,noatime fuse sshfs mount]
runc run [bind mount {no,rel,strict}atime semantics]
runc run --no-pivot must not expose bare /proc
runc pause and resume
runc pause and resume with nonexist container
runc run personality for i686
runc run personality with exec for i686
runc run personality for x86_64
runc run personality with exec for x86_64
runc create [ --pidfd-socket ] 
runc run [ --pidfd-socket ] 
runc exec [ --pidfd-socket ] [cgroups_v1]  # skip test requires cgroups_v1
runc exec [ --pidfd-socket ] [cgroups_v2] 
ps
ps -f json
ps -e -x
ps after the container stopped
runc run with RLIMIT_NOFILE(The same as system's hard value)
runc run with RLIMIT_NOFILE(Bigger than system's hard value)
runc run with RLIMIT_NOFILE(Smaller than system's hard value)
runc exec with RLIMIT_NOFILE(The same as system's hard value)
runc exec with RLIMIT_NOFILE(Bigger than system's hard value)
runc exec with RLIMIT_NOFILE(Smaller than system's hard value)
global --root
runc run
runc run --keep
runc run --keep (check cgroup exists)
runc run [hostname domainname]
runc run with tmpfs
runc run with tmpfs perms
runc run [/proc/self/exe clone]
runc run [joining existing container namespaces]
runc run [execve error]
runc run check default home
scheduler is applied
scheduler vs cpus
runc run [seccomp] (SCMP_ACT_NOTIFY old kernel) # skip requires kernel < 5.6
runc run [seccomp] (SCMP_ACT_NOTIFY noNewPrivileges false)
runc run [seccomp] (SCMP_ACT_NOTIFY noNewPrivileges true)
runc exec [seccomp] (SCMP_ACT_NOTIFY noNewPrivileges false)
runc exec [seccomp] (SCMP_ACT_NOTIFY noNewPrivileges true)
runc run [seccomp] (SCMP_ACT_NOTIFY important syscalls noNewPrivileges false)
runc run [seccomp] (SCMP_ACT_NOTIFY important syscalls noNewPrivileges true)
runc run [seccomp] (ignore listener path if no notify act)
runc run [seccomp] (SCMP_ACT_NOTIFY empty listener path and notify act)
runc run [seccomp] (SCMP_ACT_NOTIFY wrong listener path)
runc run [seccomp] (SCMP_ACT_NOTIFY wrong abstract listener path)
runc run [seccomp] (SCMP_ACT_NOTIFY kill seccompagent)
runc run [seccomp] (SCMP_ACT_NOTIFY no seccompagent)
runc run [seccomp] (SCMP_ACT_NOTIFY error chmod)
runc run [seccomp] (SCMP_ACT_NOTIFY write)
runc run [seccomp] (SCMP_ACT_NOTIFY startContainer hook)
runc run [seccomp] (SCMP_ACT_NOTIFY example config)
runc run [seccomp -ENOSYS handling]
runc run [seccomp defaultErrnoRet=ENXIO]
runc run [seccomp] (SCMP_ACT_ERRNO default)
runc run [seccomp] (SCMP_ACT_ERRNO explicit errno)
runc run [seccomp] (SECCOMP_FILTER_FLAG_*)
runc run [seccomp] (SCMP_ACT_KILL)
runc run [seccomp] (startContainer hook)
runc run (no selinux label) # skip requires SELinux enabled
runc run (custom selinux label) # skip requires SELinux enabled
runc run (session keyring security label) # skip requires SELinux enabled
runc exec (session keyring security label) # skip requires SELinux enabled
runc run (session keyring security label + userns) # skip requires SELinux enabled
runc exec (session keyring security label + userns) # skip requires SELinux enabled
spec generation cwd
spec generation --bundle
spec validator
runc start
runc run detached
runc run detached ({u,g}id != 0)
runc run detached --pid-file
runc run detached --pid-file with new CWD
runc run
runc run ({u,g}id != 0)
runc run as user with no exec bit but CAP_DAC_OVERRIDE set
runc run with rootfs set to .
runc run --pid-file
runc run [rootless with host pidns]
runc run [redundant seccomp rules]
state (kill + delete)
state (pause + resume)
runc run [timens offsets with no timens]
runc run [timens with no offsets]
runc run [simple timens]
runc exec [simple timens]
runc run [simple timens + userns]
runc run [stdin not a tty]
runc run [tty ptsname]
runc run [tty owner]
runc run [tty owner] ({u,g}id != 0)
runc exec [stdin not a tty]
runc exec [tty ptsname]
runc exec [tty owner]
runc exec [tty owner] ({u,g}id != 0)
runc exec [tty consolesize]
runc create [terminal=false]
runc run [terminal=false]
runc run -d [terminal=false]
umask
update cgroup v1/v2 common limits
update cgroup cpu limits
cpu burst
set cpu period with no quota
set cpu period with no quota (invalid period)
set cpu quota with no period
update cpu period with no previous period/quota set
update cpu quota with no previous period/quota set
update cpu period in a pod cgroup with pod limit set # skip test requires cgroups_v1
update cgroup cpu.idle
update cgroup cpu.idle via systemd v252+ # skip requires systemd >= v252
update cgroup v2 resources via unified map
update cpuset parameters via resources.CPU
update cpuset parameters via v2 unified map
update cpuset cpus range via v2 unified map # skip test requires systemd
update rt period and runtime # skip test requires cgroups_v1
update devices [minimal transition rules]
update paused container
update memory vs CheckBeforeUpdate
userns with simple mount
userns with 2 inaccessible mounts
userns with inaccessible mount + exec
userns with bind mount before a cgroupfs mount # skip test requires cgroups_v1
userns join other container userns
userns join other container userns[selinux enabled] # skip requires SELinux enabled and in enforcing mode
userns join other container userns [bind-mounted nsfd]
userns join external namespaces [wrong userns owner]
runc version