runc run no capability
runc run with unknown capability
runc run with new privileges
runc run with some capabilities
runc exec --cap
runc exec --cap [ambient is set from spec]
runc run [ambient caps not set in inheritable result in a warning]
runc exec (cgroup v2, ro cgroupfs, new cgroupns) does not chown cgroup # skip test requires systemd
runc exec (cgroup v2, rw cgroupfs, inherit cgroupns) does not chown cgroup # skip test requires systemd
runc exec (cgroup v2, rw cgroupfs, new cgroupns) does chown cgroup # skip test requires systemd
[skip] runc create (no limits + no cgrouppath + no permission) succeeds
runc create (rootless + no limits + cgrouppath + no permission) fails with permission error # skip test requires rootless
runc create (rootless + limits + no cgrouppath + no permission) fails with informative error # skip test requires rootless
runc create (limits + cgrouppath + permission on the cgroup dir) succeeds
[skip] runc exec (limits + cgrouppath + permission on the cgroup dir) succeeds
runc exec (cgroup v2 + init process in non-root cgroup) succeeds
runc run (cgroup v1 + unified resources should fail) # skip test requires cgroups_v1
runc run (blkio weight)
runc run (per-device io weight for bfq) # skip BFQ scheduler not available
runc run (per-device multiple iops via unified)
[skip] runc run (cpu.idle)
runc run (hugetlb limits)
runc run (cgroup v2 resources.unified only)
runc run (cgroup v2 resources.unified swap)
[skip] runc run (cgroup v2 resources.unified override)
runc run (cgroupv2 mount inside container)
runc exec (cgroup v1+hybrid joins correct cgroup) # skip test requires cgroups_hybrid
runc exec should refuse a paused container
runc exec --ignore-paused
runc run/create should error for a non-empty cgroup
[skip]runc run/create should refuse pre-existing frozen cgroup
checkpoint and restore # skip test requires criu
checkpoint and restore (bind mount, destination is symlink) # skip test requires criu
checkpoint and restore (with --debug) # skip test requires criu
checkpoint and restore (cgroupns) # skip test requires criu
checkpoint --pre-dump (bad --parent-path) # skip test requires criu
checkpoint --pre-dump and restore # skip test requires criu
checkpoint --lazy-pages and restore # skip test requires criu
checkpoint and restore in external network namespace # skip test requires criu
checkpoint and restore with container specific CRIU config # skip test requires criu
checkpoint and restore with nested bind mounts # skip test requires criu
checkpoint then restore into a different cgroup (via --manage-cgroups-mode ignore) # skip test requires criu
checkpoint/restore and exec # skip test requires criu
runc exec [CPU affinity, only initial set from process.json]
runc exec [CPU affinity, initial and final set from process.json]
runc exec [CPU affinity, initial and final set from config.json]
[skip] runc create
runc create exec
[skip] runc create --pid-file
[skip] runc create --pid-file with new CWD
[skip] runc create [shared pidns + rootless]
[skip] runc exec --user with no access to cwd
runc create sets up user before chdir to cwd if needed # skip test requires rootless
[skip] runc create can chdir if runc has access
global --debug
global --debug to --log
global --debug to --log --log-format 'text'
global --debug to --log --log-format 'json'
runc delete
[skip] runc delete --force
[skip] runc delete --force ignore not exist
[skip] runc delete [host pidns + init gone]
[skip] runc delete --force [host pidns + init gone]
[skip] runc delete --force [paused container]
runc delete --force in cgroupv1 with subcgroups # skip test requires cgroups_v1
runc delete --force in cgroupv2 with subcgroups
runc delete removes failed systemd unit # skip requires systemd >= v244
runc run [redundant default /dev/tty]
[skip] runc run [redundant default /dev/ptmx]
runc run/update [device cgroup deny]
runc run [device cgroup allow rw char device]
runc run [device cgroup allow rm block device]
runc exec vs systemctl daemon-reload # skip test requires systemd
runc run [devices vs systemd NeedDaemonReload] # skip requires systemd >= v230
[skip] non-empty HOME env is used
empty HOME env var is overridden
empty HOME env var is overridden with multiple overrides
[skip]env var HOME is set only once
[skip] env var override is set only once
[skip] env var override
env var with new-line is honored
events --stats
[skip]events --stats with psi data
[skip]events --interval default
events --interval 1s
events --interval 100ms
[skip]events oom
[skip] runc exec
[skip]runc exec [exit codes]
[skip] runc exec --pid-file
[skip] runc exec --pid-file with new CWD
runc exec ls -la
[skip] runc exec ls -la with --cwd
[skip] runc exec --env
runc exec --user
[skip] runc exec --user vs /dev/null ownership
runc exec --additional-gids
runc exec --preserve-fds
runc --debug exec
runc --debug --log exec
runc exec --cgroup sub-cgroups [v1] # skip test requires cgroups_v1
runc exec --cgroup subcgroup [v2]
runc exec [execve error]
runc exec check default home
runc -h
runc command -h
runc foo -h
runc create [second createRuntime hook fails]
runc create [hook fails]
runc run [hook fails]
runc run [startContainer hook should inherit process environment]
[skip] runc run [hook's argv is preserved]
runc run (hooks library tests)
[skip] runc run [host mount ns + hooks]
simple idmap mount [userns]
simple idmap mount [no userns]
[skip]write to an idmap mount [userns]
write to an idmap mount [no userns]
idmap mount with propagation flag [userns]
idmap mount with relative path [userns]
idmap mount with bind mount [userns]
idmap mount with bind mount [no userns]
two idmap mounts (same mapping) with two bind mounts [userns]
same idmap mount (different mappings) [userns]
same idmap mount (different mappings) [no userns]
multiple idmap mounts (different mappings) [userns]
multiple idmap mounts (different mappings) [no userns]
[skip]idmap mount (complicated mapping) [userns]
idmap mount (complicated mapping) [no userns]
idmap mount (non-recursive idmap) [userns]
idmap mount (non-recursive idmap) [no userns]
idmap mount (idmap flag) [userns]
idmap mount (idmap flag) [no userns]
idmap mount (ridmap flag) [userns]
idmap mount (ridmap flag) [no userns]
idmap mount (idmap flag, implied mapping) [userns]
idmap mount (ridmap flag, implied mapping) [userns]
idmap mount (idmap flag, implied mapping, userns join) [userns]
ioprio_set is applied to process group
kill detached busybox
kill KILL [host pidns]
kill KILL [host pidns + init gone]
[skip] kill KILL [shared pidns]
list
mask paths [file]
mask paths [directory]
mask paths [prohibit symlink /proc]
mask paths [prohibit symlink /sys]
runc run [tmpcopyup]
[skip]runc run [bind mount]
[skip] runc run [ro tmpfs mount]
runc run [ro /dev mount]
[skip] runc run [tmpfs mount with absolute symlink]
runc run [/proc is a symlink]
[skip] runc run [setgid / + mkdirall]
[skip] runc run [ro /sys/fs/cgroup mounts]
runc run [ro /sys/fs/cgroup mounts + cgroupns]
runc run [mount order, container bind-mount source]
runc run [mount order, container bind-mount source] (userns)
runc run [mount order, container idmap source]
runc run [mount order, container idmap source] (userns)
[skip] runc run [rootfsPropagation shared]
runc run [rbind,ro mount is read-only but not recursively]
[skip] runc run [rbind,rro mount is recursively read-only]
[skip] runc run [rbind,ro,rro mount is recursively read-only too]
[skip] runc run [mount(8)-like behaviour: --bind with no options]
runc run [mount(8)-unlike behaviour: --bind with clearing flag]
runc run [implied-rw bind mount of a ro fuse sshfs mount]
runc run [explicit-rw bind mount of a ro fuse sshfs mount]
runc run [dev,exec,suid,atime bind mount of a nodev,nosuid,noexec,noatime fuse sshfs mount]
runc run [ro bind mount of a nodev,nosuid,noexec fuse sshfs mount]
runc run [ro,symfollow bind mount of a rw,nodev,nosymfollow fuse sshfs mount]
runc run [ro,noexec bind mount of a nosuid,noatime fuse sshfs mount]
runc run [bind mount {no,rel,strict}atime semantics]
[skip] runc run --no-pivot must not expose bare /proc
[skip] runc pause and resume
[skip] runc pause and resume with nonexist container
runc run personality for i686
runc run personality with exec for i686
[skip] runc run personality for x86_64
runc run personality with exec for x86_64
[skip] runc create [ --pidfd-socket ] 
[skip] runc run [ --pidfd-socket ] 
runc exec [ --pidfd-socket ] [cgroups_v1]  # skip test requires cgroups_v1
[skip] runc exec [ --pidfd-socket ] [cgroups_v2] 
[skip] ps
[skip] ps -f json
ps -e -x
[skip] ps after the container stopped
runc run with RLIMIT_NOFILE(The same as system's hard value)
[skip] runc run with RLIMIT_NOFILE(Bigger than system's hard value)
[skip] runc run with RLIMIT_NOFILE(Smaller than system's hard value)
runc exec with RLIMIT_NOFILE(The same as system's hard value)
runc exec with RLIMIT_NOFILE(Bigger than system's hard value)
runc exec with RLIMIT_NOFILE(Smaller than system's hard value)
[skip] global --root
[skip] runc run
runc run --keep
runc run --keep (check cgroup exists)
[skip] runc run [hostname domainname]
runc run with tmpfs
runc run with tmpfs perms
runc run [/proc/self/exe clone]
runc run [joining existing container namespaces]
runc run [execve error]
[skip] runc run check default home
scheduler is applied
scheduler vs cpus
runc run [seccomp] (SCMP_ACT_NOTIFY old kernel) # skip requires kernel < 5.6
runc run [seccomp] (SCMP_ACT_NOTIFY noNewPrivileges false)
[skip] runc run [seccomp] (SCMP_ACT_NOTIFY noNewPrivileges true)
runc exec [seccomp] (SCMP_ACT_NOTIFY noNewPrivileges false)
runc exec [seccomp] (SCMP_ACT_NOTIFY noNewPrivileges true)
runc run [seccomp] (SCMP_ACT_NOTIFY important syscalls noNewPrivileges false)
[skip] runc run [seccomp] (SCMP_ACT_NOTIFY important syscalls noNewPrivileges true)
[skip] runc run [seccomp] (ignore listener path if no notify act)
[skip] runc run [seccomp] (SCMP_ACT_NOTIFY empty listener path and notify act)
[skip] runc run [seccomp] (SCMP_ACT_NOTIFY wrong listener path)
[skip] runc run [seccomp] (SCMP_ACT_NOTIFY wrong abstract listener path)
runc run [seccomp] (SCMP_ACT_NOTIFY kill seccompagent)
runc run [seccomp] (SCMP_ACT_NOTIFY no seccompagent)
runc run [seccomp] (SCMP_ACT_NOTIFY error chmod)
[skip] runc run [seccomp] (SCMP_ACT_NOTIFY write)
[skip] runc run [seccomp] (SCMP_ACT_NOTIFY startContainer hook)
[skip] runc run [seccomp] (SCMP_ACT_NOTIFY example config)
runc run [seccomp -ENOSYS handling]
[skip] runc run [seccomp defaultErrnoRet=ENXIO]
runc run [seccomp] (SCMP_ACT_ERRNO default)
runc run [seccomp] (SCMP_ACT_ERRNO explicit errno)
runc run [seccomp] (SECCOMP_FILTER_FLAG_*)
[skip] runc run [seccomp] (SCMP_ACT_KILL)
runc run [seccomp] (startContainer hook)
runc run (no selinux label) # skip requires SELinux enabled
runc run (custom selinux label) # skip requires SELinux enabled
runc run (session keyring security label) # skip requires SELinux enabled
runc exec (session keyring security label) # skip requires SELinux enabled
runc run (session keyring security label + userns) # skip requires SELinux enabled
runc exec (session keyring security label + userns) # skip requires SELinux enabled
[skip] spec generation cwd
[skip] spec generation --bundle
[skip] spec validator
[skip] runc start
[skip] runc run detached
[skip] runc run detached ({u,g}id != 0)
[skip] runc run detached --pid-file
[skip] runc run detached --pid-file with new CWD
[skip] runc run
[skip] runc run ({u,g}id != 0)
runc run as user with no exec bit but CAP_DAC_OVERRIDE set
[skip] runc run with rootfs set to .
[skip] runc run --pid-file
[skip] runc run [rootless with host pidns]
[skip] runc run [redundant seccomp rules]
[skip] state (kill + delete)
[skip] state (pause + resume)
[skip] runc run [timens offsets with no timens]
runc run [timens with no offsets]
runc run [simple timens]
runc exec [simple timens]
runc run [simple timens + userns]
runc run [stdin not a tty]
runc run [tty ptsname]
runc run [tty owner]
runc run [tty owner] ({u,g}id != 0)
runc exec [stdin not a tty]
runc exec [tty ptsname]
runc exec [tty owner]
runc exec [tty owner] ({u,g}id != 0)
runc exec [tty consolesize]
[skip] runc create [terminal=false]
[skip] runc run [terminal=false]
[skip] runc run -d [terminal=false]
umask
update cgroup v1/v2 common limits
update cgroup cpu limits
cpu burst
[skip] set cpu period with no quota
set cpu period with no quota (invalid period)
[skip] set cpu quota with no period
update cpu period with no previous period/quota set
update cpu quota with no previous period/quota set
update cpu period in a pod cgroup with pod limit set # skip test requires cgroups_v1
update cgroup cpu.idle
update cgroup cpu.idle via systemd v252+ # skip requires systemd >= v252
[skip] update cgroup v2 resources via unified map
[skip] update cpuset parameters via resources.CPU
[skip] update cpuset parameters via v2 unified map
update cpuset cpus range via v2 unified map # skip test requires systemd
update rt period and runtime # skip test requires cgroups_v1
[skip] update devices [minimal transition rules]
[skip] update paused container
update memory vs CheckBeforeUpdate
[skip] userns with simple mount
userns with 2 inaccessible mounts
userns with inaccessible mount + exec
userns with bind mount before a cgroupfs mount # skip test requires cgroups_v1
userns join other container userns
userns join other container userns[selinux enabled] # skip requires SELinux enabled and in enforcing mode
userns join other container userns [bind-mounted nsfd]
userns join external namespaces [wrong userns owner]
runc version